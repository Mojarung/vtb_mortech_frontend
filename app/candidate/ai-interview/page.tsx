'use client'

import { useCallback, useEffect, useMemo, useRef, useState } from 'react'
import { useRouter, useSearchParams } from 'next/navigation'
import { motion } from 'framer-motion'
import { Mic, MicOff, Video as VideoIcon, VideoOff as VideoOffIcon, Settings, MessageSquare } from 'lucide-react'
import { PipecatClient } from '@pipecat-ai/client-js'
// @ts-ignore - —Ç–∏–ø—ã –Ω–µ –¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è daily-transport
import { DailyTransport } from '@pipecat-ai/daily-transport'
import { PipecatClientProvider, usePipecatClient, PipecatClientVideo, PipecatClientAudio, PipecatClientMicToggle, PipecatClientCamToggle } from '@pipecat-ai/client-react'

export const dynamic = 'force-dynamic'
export const revalidate = 0

const API_BASE_URL = process.env.NEXT_PUBLIC_AVATAR_BASE_URL || ''
const PIPECAT_BACKEND_URL = `${API_BASE_URL.replace(/\/$/, '')}/interview`

function AIInterviewPageInternal({ 
  externalBotConnected, 
  externalTimerActive 
}: { 
  externalBotConnected: boolean
  externalTimerActive: boolean 
}) {
  const [isConnecting, setIsConnecting] = useState(false)
  const [isConnected, setIsConnected] = useState(false)
  const [status, setStatus] = useState('AI –±–æ—Ç: –û—Ç–∫–ª—é—á–µ–Ω–æ')
  const [currentTime, setCurrentTime] = useState('00:00')
  const [elapsedSeconds, setElapsedSeconds] = useState(0)
  const [showEndModal, setShowEndModal] = useState(false)
  const hasEverConnectedRef = useRef(false)
  
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑ –≤–Ω–µ—à–Ω–µ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  const isBotConnected = externalBotConnected
  const timerActive = externalTimerActive

  const client = usePipecatClient()
  const searchParams = useSearchParams()
  const interviewId = searchParams.get('interview_id') || ''
  const router = useRouter()

  // –¢–∞–π–º–µ—Ä –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è AI HR
  useEffect(() => {
    let timer: NodeJS.Timeout
    if (timerActive) {
      timer = setInterval(() => {
        setElapsedSeconds(prev => prev + 1)
      }, 1000)
    }
    return () => {
      if (timer) clearInterval(timer)
    }
  }, [timerActive])

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
  useEffect(() => {
    const minutes = Math.floor(elapsedSeconds / 60).toString().padStart(2, '0')
    const seconds = (elapsedSeconds % 60).toString().padStart(2, '0')
    setCurrentTime(`${minutes}:${seconds}`)
  }, [elapsedSeconds])

  // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å—Ç–∞—Ç—É—Å–∞ —á–µ—Ä–µ–∑ –∫–æ–ª–ª–±—ç–∫–∏ (onBotConnected / onBotDisconnected)
  useEffect(() => {
    if (isBotConnected) {
      setStatus('AI –±–æ—Ç: –ü–æ–¥–∫–ª—é—á–µ–Ω–æ')
      setIsConnected(true)
      hasEverConnectedRef.current = true
    } else {
      // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –º–æ–¥–∞–ª–∫—É –Ω–∞ –ø–µ—Ä–≤–æ–º —Ä–µ–Ω–¥–µ—Ä–µ –¥–æ –ø–µ—Ä–≤–æ–π —É—Å–ø–µ—à–Ω–æ–π —Å–µ—Å—Å–∏–∏
      if (hasEverConnectedRef.current) {
        setStatus('AI –±–æ—Ç: –û—Ç–∫–ª—é—á–µ–Ω–æ')
        setIsConnected(false)
        setShowEndModal(true)
      }
    }
  }, [isBotConnected])

  const handleConnect = useCallback(async () => {
    if (!client || isConnecting || isConnected) return
    try {
      setIsConnecting(true)
      setStatus('AI –±–æ—Ç: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...')
      const base = PIPECAT_BACKEND_URL.replace(/\/$/, '')
      const webrtcUrl = interviewId ? `${base}/${encodeURIComponent(interviewId)}` : base
      await (client as any).startBotAndConnect({"endpoint": webrtcUrl});
      setIsConnected(true)
      setStatus('AI –±–æ—Ç: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...')
    } catch (e) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Pipecat:', e)
      setIsConnected(false)
      setStatus('AI –±–æ—Ç: –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è')
    } finally {
      setIsConnecting(false)
    }
  }, [client, isConnecting, isConnected, interviewId])

  const handleDisconnect = useCallback(async () => {
    if (!client || !isConnected) return
    try {
      await client.disconnect()
    } catch (e) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è:', e)
    } finally {
      setIsConnected(false)
      setStatus('AI –±–æ—Ç: –û—Ç–∫–ª—é—á–µ–Ω–æ')
    }
  }, [client, isConnected])

  useEffect(() => {
    return () => {
      // –û—Ç–∫–ª—é—á–∞–µ–º—Å—è –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
      handleDisconnect()
    }
  }, [handleDisconnect])

  return (
    <div className="min-h-screen bg-black text-white">
      {/* Header */}
      <div className="flex items-center justify-between p-4 bg-gray-900">
        <div className="flex items-center gap-4">
          <div className="flex items-center gap-2">
            <div className={`w-2 h-2 rounded-full ${isBotConnected ? 'bg-green-500' : isConnecting ? 'bg-yellow-500 animate-pulse' : 'bg-red-500'}`}></div>
            <span className="text-sm text-gray-300">{isBotConnected ? '–ü–û–î–ö–õ–Æ–ß–ï–ù–û' : status}</span>
          </div>
        </div>
      </div>

      <div className="flex h-[calc(100vh-64px)]">
        {/* –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å - AI HR (–≤–∏–¥–µ–æ –±–æ—Ç–∞) */}
        <div className="flex-1 relative bg-gray-800">
          <PipecatClientVideo participant="bot" className="absolute inset-0 w-full h-full object-cover" />
          {/* –£—á–∞—Å—Ç–Ω–∏–∫–∏ */}
          <div className="absolute bottom-4 left-4">
            <div className="flex items-center gap-2 bg-black bg-opacity-50 rounded-full px-4 py-2">
              <div className="w-6 h-6 bg-gray-600 rounded-full flex items-center justify-center">
                <span className="text-xs text-white">üë•</span>
              </div>
              <span className="text-sm text-white">2 —É—á–∞—Å—Ç–Ω–∏–∫–∞</span>
            </div>
          </div>
        </div>

        {/* –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å - –ö–∞–Ω–¥–∏–¥–∞—Ç (–ª–æ–∫–∞–ª—å–Ω–æ–µ –≤–∏–¥–µ–æ) */}
        <div className="flex-1 relative bg-gray-700">
          <PipecatClientVideo participant="local" fit="cover" mirror className="absolute inset-0 w-full h-full object-cover" />
        </div>
      </div>

      {/* –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è */}
      <div className="absolute bottom-8 left-1/2 transform -translate-x-1/2">
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          className="flex items-center gap-4 bg-gray-900 bg-opacity-95 backdrop-blur-sm rounded-2xl px-8 py-4 shadow-2xl border border-gray-700"
        >
          <button className="p-3 bg-gray-700 hover:bg-gray-600 rounded-full transition-colors">
            <Settings className="text-white" size={20} />
          </button>

          <PipecatClientMicToggle>
            {({ disabled, isMicEnabled, onClick }) => (
              <button
                onClick={onClick}
                disabled={disabled || false}
                className={`p-3 rounded-full transition-colors ${isMicEnabled ? 'bg-gray-700 hover:bg-gray-600' : 'bg-red-500 hover:bg-red-600'}`}
              >
                {isMicEnabled ? <Mic className="text-white" size={20} /> : <MicOff className="text-white" size={20} />}
              </button>
            )}
          </PipecatClientMicToggle>

          <PipecatClientCamToggle>
            {({ disabled, isCamEnabled, onClick }) => (
              <button
                onClick={onClick}
                disabled={disabled || false}
                className={`p-3 rounded-full transition-colors ${isCamEnabled ? 'bg-gray-700 hover:bg-gray-600' : 'bg-red-500 hover:bg-red-600'}`}
              >
                {isCamEnabled ? <VideoIcon className="text-white" size={20} /> : <VideoOffIcon className="text-white" size={20} />}
              </button>
            )}
          </PipecatClientCamToggle>

          {!isConnected ? (
            <button
              onClick={handleConnect}
              disabled={isConnecting}
              className={`px-6 py-3 rounded-full font-medium transition-colors ${isConnecting ? 'bg-purple-400 text-white' : 'bg-purple-600 hover:bg-purple-700 text-white'}`}
            >
              {isConnecting ? '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...' : '–ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ AI'}
            </button>
          ) : !isBotConnected ? (
            <button
              disabled={true}
              className="px-6 py-3 rounded-full font-medium transition-colors bg-gray-500 text-white cursor-not-allowed"
            >
              –û–∂–∏–¥–∞–Ω–∏–µ AI HR...
            </button>
          ) : (
            <button
              disabled
              className="px-6 py-3 rounded-full font-medium transition-colors bg-green-600 text-white cursor-default"
            >
              –ü–æ–¥–∫–ª—é—á–µ–Ω–æ
            </button>
          )}
        </motion.div>
      </div>

      {/* –ê—É–¥–∏–æ –±–æ—Ç–∞ */}
      <PipecatClientAudio />

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è */}
      {showEndModal && (
        <div className="fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-70">
          <div className="bg-gray-900 border border-gray-700 rounded-2xl p-6 max-w-md w-full mx-4 text-white">
            <h2 className="text-xl font-semibold mb-2">–°–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ</h2>
            <p className="text-gray-300 mb-6">–°–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.</p>
            <div className="flex gap-3 justify-end">
              <button
                onClick={() => router.push('/candidate/dashboard')}
                className="px-4 py-2 rounded-lg bg-purple-600 hover:bg-purple-700 transition-colors"
              >
                –ù–∞ –¥–∞—à–±–æ—Ä–¥
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  )
}

export default function AIInterviewPage() {
  const [isClient, setIsClient] = useState(false)
  
  useEffect(() => {
    setIsClient(true)
  }, [])

  const [internalBotConnected, setInternalBotConnected] = useState(false)
  const [internalTimerActive, setInternalTimerActive] = useState(false)

  const client = useMemo(() => {
    if (!isClient || typeof window === 'undefined') return null as unknown as PipecatClient
    return new PipecatClient({
      transport: new DailyTransport(),
      enableCam: true,
      enableMic: true,
      callbacks: {
        onBotConnected: () => {
          console.log('ü§ñ –ë–æ—Ç –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è')
          setInternalBotConnected(true)
          setInternalTimerActive(true)
        },
        onBotDisconnected: () => {
          console.log('ü§ñ –ë–æ—Ç –æ—Ç–∫–ª—é—á–∏–ª—Å—è')
          setInternalBotConnected(false)
          setInternalTimerActive(false)
        },
        onBotReady: () => {
          console.log('ü§ñ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ')
          setInternalBotConnected(true)
          setInternalTimerActive(true)
        },
        onError: (error: unknown) => console.error('‚ùå –û—à–∏–±–∫–∞ Pipecat:', error),
        onTrackStarted: (track: MediaStreamTrack, participant?: any) => {
          console.log('üé• –¢—Ä–µ–∫ –∑–∞–ø—É—â–µ–Ω:', track.kind, participant)
        },
      },
    })
  }, [isClient])

  if (!isClient || !client) {
    return (
      <div className="min-h-screen bg-black text-white flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-white mx-auto mb-4"></div>
          <p>–ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Ç–µ—Ä–≤—å—é...</p>
        </div>
      </div>
    )
  }

  return (
    <PipecatClientProvider client={client}>
      <AIInterviewPageInternal 
        externalBotConnected={internalBotConnected}
        externalTimerActive={internalTimerActive}
      />
    </PipecatClientProvider>
  )
}