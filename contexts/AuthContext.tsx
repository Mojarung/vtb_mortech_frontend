'use client';

import React, { createContext, useContext, useEffect, useState, ReactNode } from 'react';
import { apiClient, User } from '@/lib/api';

interface AuthContextType {
  user: User | null;
  loading: boolean;
  login: (username: string, password: string) => Promise<void>;
  register: (userData: {
    username: string;
    email: string;
    password: string;
    role: 'hr' | 'user';
    full_name?: string;
  }) => Promise<void>;
  logout: () => void;
  isAuthenticated: boolean;
}

const AuthContext = createContext<AuthContextType | undefined>(undefined);

export const useAuth = () => {
  const context = useContext(AuthContext);
  if (context === undefined) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
};

interface AuthProviderProps {
  children: ReactNode;
}

export const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {
  const [user, setUser] = useState<User | null>(null);
  const [loading, setLoading] = useState(true);

  const isAuthenticated = !!user;

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  useEffect(() => {
    const checkAuth = async () => {
      console.log('üîç AuthContext: Starting auth check...');
      try {
        console.log('üîç AuthContext: Calling getCurrentUser...');
        const userData = await apiClient.getCurrentUser();
        console.log('‚úÖ AuthContext: User authenticated successfully:', userData);
        setUser(userData);
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if (typeof window !== 'undefined') {
          const currentPath = window.location.pathname;
          // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –≤—Ö–æ–¥–∞/—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ dashboard
          if (currentPath.startsWith('/auth/')) {
            console.log('üîÑ AuthContext: Auto-redirecting authenticated user from auth page');
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º setTimeout —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–æ–±–ª–µ–º —Å React
            setTimeout(() => {
              if (userData.role === 'hr') {
                window.location.href = '/hr/dashboard';
              } else {
                window.location.href = '/candidate/dashboard';
              }
            }, 100);
          }
        }
      } catch (error) {
        console.log('‚ùå AuthContext: User not authenticated:', error);
        console.log('‚ùå AuthContext: Error details:', {
          message: error instanceof Error ? error.message : 'Unknown error',
          stack: error instanceof Error ? error.stack : undefined
        });
        setUser(null);
        // HttpOnly cookies –Ω–µ–ª—å–∑—è –æ—á–∏—Å—Ç–∏—Ç—å –∏–∑ JavaScript
        // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ logout –∏–ª–∏ –∏—Å—Ç–µ—á–µ–Ω–∏–∏ —Å—Ä–æ–∫–∞
      } finally {
        console.log('üîç AuthContext: Setting loading to false');
        setLoading(false);
      }
    };

    checkAuth();
  }, []); // –£–±–∏—Ä–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è

  const login = async (username: string, password: string) => {
    try {
      setLoading(true);
      console.log('üöÄ AuthContext: Starting login process...');
      console.log('üöÄ AuthContext: Username:', username);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
      if (user) {
        console.log('‚ö†Ô∏è AuthContext: User already authenticated, redirecting...');
        if (typeof window !== 'undefined') {
          if (user.role === 'hr') {
            window.location.href = '/hr/dashboard';
          } else {
            window.location.href = '/candidate/dashboard';
          }
        }
        return;
      }
      
      console.log('üöÄ AuthContext: Calling apiClient.login...');
      const loginResponse = await apiClient.login({ username, password });
      console.log('‚úÖ AuthContext: Login successful, response:', loginResponse);
      
      console.log('‚è≥ AuthContext: Waiting for cookies to be set...');
      // –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ HttpOnly cookies
      await new Promise(resolve => setTimeout(resolve, 500));
      
      console.log('üîç AuthContext: Calling getCurrentUser...');
      const userData = await apiClient.getCurrentUser();
      console.log('‚úÖ AuthContext: User data received:', userData);
      setUser(userData);
      
      // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π dashboard
      if (typeof window !== 'undefined') {
        console.log('üîÑ AuthContext: Redirecting to dashboard for role:', userData.role);
        if (userData.role === 'hr') {
          window.location.href = '/hr/dashboard';
        } else {
          window.location.href = '/candidate/dashboard';
        }
      }
    } catch (error) {
      console.error('‚ùå AuthContext: Login failed:', error);
      console.error('‚ùå AuthContext: Error details:', {
        message: error instanceof Error ? error.message : 'Unknown error',
        stack: error instanceof Error ? error.stack : undefined
      });
      throw error;
    } finally {
      console.log('üîç AuthContext: Setting loading to false');
      setLoading(false);
    }
  };

  const register = async (userData: {
    username: string;
    email: string;
    password: string;
    role: 'hr' | 'user';
    full_name?: string;
  }) => {
    try {
      setLoading(true);
      await apiClient.register(userData);
      // –ü–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ª–æ–≥–∏–Ω–∏–º—Å—è
      await apiClient.login({ username: userData.username, password: userData.password });
      
      // –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ HttpOnly cookies
      await new Promise(resolve => setTimeout(resolve, 500));
      
      const currentUser = await apiClient.getCurrentUser();
      setUser(currentUser);
      
      // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π dashboard
      if (typeof window !== 'undefined') {
        if (currentUser.role === 'hr') {
          window.location.href = '/hr/dashboard';
        } else {
          window.location.href = '/candidate/dashboard';
        }
      }
    } catch (error) {
      console.error('Registration failed:', error);
      throw error;
    } finally {
      setLoading(false);
    }
  };

  const logout = async () => {
    try {
      setUser(null);
      await apiClient.logout();
      // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ—Å–ª–µ logout
      if (typeof window !== 'undefined') {
        window.location.href = '/';
      }
    } catch (error) {
      console.error('Logout failed:', error);
      // –î–∞–∂–µ –µ—Å–ª–∏ logout –Ω–µ —É–¥–∞–ª—Å—è, –æ—á–∏—â–∞–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      setUser(null);
      if (typeof window !== 'undefined') {
        window.location.href = '/';
      }
    }
  };

  const value: AuthContextType = {
    user,
    loading,
    login,
    register,
    logout,
    isAuthenticated,
  };

  return (
    <AuthContext.Provider value={value}>
      {children}
    </AuthContext.Provider>
  );
};
